{"id":"../node_modules/ramda/src/into.js","dependencies":[{"name":"/Users/brian/Sites/dashboard/package.json","includedInParent":true,"mtime":1557967337000},{"name":"/Users/brian/Sites/dashboard/.babelrc","includedInParent":true,"mtime":1553892080000},{"name":"/Users/brian/Sites/dashboard/node_modules/ramda/package.json","includedInParent":true,"mtime":1557967283000},{"name":"./internal/_clone","loc":{"line":1,"column":21},"parent":"/Users/brian/Sites/dashboard/node_modules/ramda/src/into.js","resolved":"/Users/brian/Sites/dashboard/node_modules/ramda/src/internal/_clone.js"},{"name":"./internal/_curry3","loc":{"line":2,"column":22},"parent":"/Users/brian/Sites/dashboard/node_modules/ramda/src/into.js","resolved":"/Users/brian/Sites/dashboard/node_modules/ramda/src/internal/_curry3.js"},{"name":"./internal/_isTransformer","loc":{"line":3,"column":29},"parent":"/Users/brian/Sites/dashboard/node_modules/ramda/src/into.js","resolved":"/Users/brian/Sites/dashboard/node_modules/ramda/src/internal/_isTransformer.js"},{"name":"./internal/_reduce","loc":{"line":4,"column":22},"parent":"/Users/brian/Sites/dashboard/node_modules/ramda/src/into.js","resolved":"/Users/brian/Sites/dashboard/node_modules/ramda/src/internal/_reduce.js"},{"name":"./internal/_stepCat","loc":{"line":5,"column":23},"parent":"/Users/brian/Sites/dashboard/node_modules/ramda/src/into.js","resolved":"/Users/brian/Sites/dashboard/node_modules/ramda/src/internal/_stepCat.js"}],"generated":{"js":"var _clone = require('./internal/_clone');\nvar _curry3 = require('./internal/_curry3');\nvar _isTransformer = require('./internal/_isTransformer');\nvar _reduce = require('./internal/_reduce');\nvar _stepCat = require('./internal/_stepCat');\n\n\n/**\n * Transforms the items of the list with the transducer and appends the\n * transformed items to the accumulator using an appropriate iterator function\n * based on the accumulator type.\n *\n * The accumulator can be an array, string, object or a transformer. Iterated\n * items will be appended to arrays and concatenated to strings. Objects will\n * be merged directly or 2-item arrays will be merged as key, value pairs.\n *\n * The accumulator can also be a transformer object that provides a 2-arity\n * reducing iterator function, step, 0-arity initial value function, init, and\n * 1-arity result extraction function result. The step function is used as the\n * iterator function in reduce. The result function is used to convert the\n * final accumulator into the return type and in most cases is R.identity. The\n * init function is used to provide the initial accumulator.\n *\n * The iteration is performed with R.reduce after initializing the transducer.\n *\n * @func\n * @memberOf R\n * @since v0.12.0\n * @category List\n * @sig a -> (b -> b) -> [c] -> a\n * @param {*} acc The initial accumulator value.\n * @param {Function} xf The transducer function. Receives a transformer and returns a transformer.\n * @param {Array} list The list to iterate over.\n * @return {*} The final, accumulated value.\n * @example\n *\n *      var numbers = [1, 2, 3, 4];\n *      var transducer = R.compose(R.map(R.add(1)), R.take(2));\n *\n *      R.into([], transducer, numbers); //=> [2, 3]\n *\n *      var intoArray = R.into([]);\n *      intoArray(transducer, numbers); //=> [2, 3]\n */\nmodule.exports = _curry3(function into(acc, xf, list) {\n  return _isTransformer(acc) ?\n    _reduce(xf(acc), acc['@@transducer/init'](), list) :\n    _reduce(xf(_stepCat(acc)), _clone(acc, [], [], false), list);\n});\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/ramda/src/into.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/ramda/src/into.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/ramda/src/into.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/ramda/src/into.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/ramda/src/into.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/ramda/src/into.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/ramda/src/into.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/ramda/src/into.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/ramda/src/into.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/ramda/src/into.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/ramda/src/into.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/ramda/src/into.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/ramda/src/into.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/ramda/src/into.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/ramda/src/into.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/ramda/src/into.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/ramda/src/into.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/ramda/src/into.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/ramda/src/into.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/ramda/src/into.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/ramda/src/into.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/ramda/src/into.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/ramda/src/into.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/ramda/src/into.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/ramda/src/into.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/ramda/src/into.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/ramda/src/into.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/ramda/src/into.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/ramda/src/into.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/ramda/src/into.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/ramda/src/into.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/ramda/src/into.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/ramda/src/into.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/ramda/src/into.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/ramda/src/into.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/ramda/src/into.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/ramda/src/into.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/ramda/src/into.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/ramda/src/into.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/ramda/src/into.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/ramda/src/into.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/ramda/src/into.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/ramda/src/into.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/ramda/src/into.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/ramda/src/into.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/ramda/src/into.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/ramda/src/into.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/ramda/src/into.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/ramda/src/into.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/ramda/src/into.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}}],"sources":{"../node_modules/ramda/src/into.js":"var _clone = require('./internal/_clone');\nvar _curry3 = require('./internal/_curry3');\nvar _isTransformer = require('./internal/_isTransformer');\nvar _reduce = require('./internal/_reduce');\nvar _stepCat = require('./internal/_stepCat');\n\n\n/**\n * Transforms the items of the list with the transducer and appends the\n * transformed items to the accumulator using an appropriate iterator function\n * based on the accumulator type.\n *\n * The accumulator can be an array, string, object or a transformer. Iterated\n * items will be appended to arrays and concatenated to strings. Objects will\n * be merged directly or 2-item arrays will be merged as key, value pairs.\n *\n * The accumulator can also be a transformer object that provides a 2-arity\n * reducing iterator function, step, 0-arity initial value function, init, and\n * 1-arity result extraction function result. The step function is used as the\n * iterator function in reduce. The result function is used to convert the\n * final accumulator into the return type and in most cases is R.identity. The\n * init function is used to provide the initial accumulator.\n *\n * The iteration is performed with R.reduce after initializing the transducer.\n *\n * @func\n * @memberOf R\n * @since v0.12.0\n * @category List\n * @sig a -> (b -> b) -> [c] -> a\n * @param {*} acc The initial accumulator value.\n * @param {Function} xf The transducer function. Receives a transformer and returns a transformer.\n * @param {Array} list The list to iterate over.\n * @return {*} The final, accumulated value.\n * @example\n *\n *      var numbers = [1, 2, 3, 4];\n *      var transducer = R.compose(R.map(R.add(1)), R.take(2));\n *\n *      R.into([], transducer, numbers); //=> [2, 3]\n *\n *      var intoArray = R.into([]);\n *      intoArray(transducer, numbers); //=> [2, 3]\n */\nmodule.exports = _curry3(function into(acc, xf, list) {\n  return _isTransformer(acc) ?\n    _reduce(xf(acc), acc['@@transducer/init'](), list) :\n    _reduce(xf(_stepCat(acc)), _clone(acc, [], [], false), list);\n});\n"},"lineCount":50}},"error":null,"hash":"b9e36a5acc35fee7b3bc94ea8171a24a","cacheData":{"env":{}}}