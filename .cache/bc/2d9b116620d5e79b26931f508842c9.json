{"id":"../../node_modules/ramda/src/flip.js","dependencies":[{"name":"/Users/brian/Sites/dashboard/package.json","includedInParent":true,"mtime":1560188391000},{"name":"/Users/brian/Sites/dashboard/.babelrc","includedInParent":true,"mtime":1558727335000},{"name":"/Users/brian/Sites/dashboard/node_modules/ramda/package.json","includedInParent":true,"mtime":1557967283000},{"name":"./internal/_curry1","loc":{"line":1,"column":22},"parent":"/Users/brian/Sites/dashboard/node_modules/ramda/src/flip.js","resolved":"/Users/brian/Sites/dashboard/node_modules/ramda/src/internal/_curry1.js"},{"name":"./curry","loc":{"line":2,"column":20},"parent":"/Users/brian/Sites/dashboard/node_modules/ramda/src/flip.js","resolved":"/Users/brian/Sites/dashboard/node_modules/ramda/src/curry.js"}],"generated":{"js":"var _curry1 = require('./internal/_curry1');\nvar curry = require('./curry');\n\n\n/**\n * Returns a new function much like the supplied one, except that the first two\n * arguments' order is reversed.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig (a -> b -> c -> ... -> z) -> (b -> a -> c -> ... -> z)\n * @param {Function} fn The function to invoke with its first two parameters reversed.\n * @return {*} The result of invoking `fn` with its first two parameters' order reversed.\n * @example\n *\n *      var mergeThree = (a, b, c) => [].concat(a, b, c);\n *\n *      mergeThree(1, 2, 3); //=> [1, 2, 3]\n *\n *      R.flip(mergeThree)(1, 2, 3); //=> [2, 1, 3]\n * @symb R.flip(f)(a, b, c) = f(b, a, c)\n */\nmodule.exports = _curry1(function flip(fn) {\n  return curry(function(a, b) {\n    var args = Array.prototype.slice.call(arguments, 0);\n    args[0] = b;\n    args[1] = a;\n    return fn.apply(this, args);\n  });\n});\n"},"sourceMaps":{"js":{"mappings":[{"source":"../../node_modules/ramda/src/flip.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../../node_modules/ramda/src/flip.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../../node_modules/ramda/src/flip.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../../node_modules/ramda/src/flip.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../../node_modules/ramda/src/flip.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../../node_modules/ramda/src/flip.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../../node_modules/ramda/src/flip.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../../node_modules/ramda/src/flip.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../../node_modules/ramda/src/flip.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../../node_modules/ramda/src/flip.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../../node_modules/ramda/src/flip.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../../node_modules/ramda/src/flip.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../../node_modules/ramda/src/flip.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../../node_modules/ramda/src/flip.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../../node_modules/ramda/src/flip.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../../node_modules/ramda/src/flip.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../../node_modules/ramda/src/flip.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../../node_modules/ramda/src/flip.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../../node_modules/ramda/src/flip.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../../node_modules/ramda/src/flip.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../../node_modules/ramda/src/flip.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../../node_modules/ramda/src/flip.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../../node_modules/ramda/src/flip.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../../node_modules/ramda/src/flip.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../../node_modules/ramda/src/flip.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../../node_modules/ramda/src/flip.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../../node_modules/ramda/src/flip.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../../node_modules/ramda/src/flip.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../../node_modules/ramda/src/flip.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../../node_modules/ramda/src/flip.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../../node_modules/ramda/src/flip.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../../node_modules/ramda/src/flip.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../../node_modules/ramda/src/flip.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}}],"sources":{"../../node_modules/ramda/src/flip.js":"var _curry1 = require('./internal/_curry1');\nvar curry = require('./curry');\n\n\n/**\n * Returns a new function much like the supplied one, except that the first two\n * arguments' order is reversed.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig (a -> b -> c -> ... -> z) -> (b -> a -> c -> ... -> z)\n * @param {Function} fn The function to invoke with its first two parameters reversed.\n * @return {*} The result of invoking `fn` with its first two parameters' order reversed.\n * @example\n *\n *      var mergeThree = (a, b, c) => [].concat(a, b, c);\n *\n *      mergeThree(1, 2, 3); //=> [1, 2, 3]\n *\n *      R.flip(mergeThree)(1, 2, 3); //=> [2, 1, 3]\n * @symb R.flip(f)(a, b, c) = f(b, a, c)\n */\nmodule.exports = _curry1(function flip(fn) {\n  return curry(function(a, b) {\n    var args = Array.prototype.slice.call(arguments, 0);\n    args[0] = b;\n    args[1] = a;\n    return fn.apply(this, args);\n  });\n});\n"},"lineCount":33}},"error":null,"hash":"cc4c5a338197abdc5715953bcb50c643","cacheData":{"env":{}}}