{"id":"../node_modules/plaid/lib/plaidRequest.js","dependencies":[{"name":"/Users/brian/Sites/dashboard/package.json","includedInParent":true,"mtime":1558713817000},{"name":"/Users/brian/Sites/dashboard/.babelrc","includedInParent":true,"mtime":1558547983000},{"name":"/Users/brian/Sites/dashboard/node_modules/plaid/package.json","includedInParent":true,"mtime":1558710984000},{"name":"ramda","loc":{"line":3,"column":16},"parent":"/Users/brian/Sites/dashboard/node_modules/plaid/lib/plaidRequest.js","resolved":"/Users/brian/Sites/dashboard/node_modules/ramda/index.js"},{"name":"request","loc":{"line":4,"column":22},"parent":"/Users/brian/Sites/dashboard/node_modules/plaid/lib/plaidRequest.js","resolved":"/Users/brian/Sites/dashboard/node_modules/request/index.js"},{"name":"../package.json","loc":{"line":5,"column":20},"parent":"/Users/brian/Sites/dashboard/node_modules/plaid/lib/plaidRequest.js","resolved":"/Users/brian/Sites/dashboard/node_modules/plaid/package.json"},{"name":"./PlaidError","loc":{"line":7,"column":25},"parent":"/Users/brian/Sites/dashboard/node_modules/plaid/lib/plaidRequest.js","resolved":"/Users/brian/Sites/dashboard/node_modules/plaid/lib/PlaidError.js"},{"name":"./wrapPromise","loc":{"line":8,"column":26},"parent":"/Users/brian/Sites/dashboard/node_modules/plaid/lib/plaidRequest.js","resolved":"/Users/brian/Sites/dashboard/node_modules/plaid/lib/wrapPromise.js"}],"generated":{"js":"'use strict';\n\nvar R = require('ramda');\nvar request = require('request');\nvar pjson = require('../package.json');\n\nvar PlaidError = require('./PlaidError');\nvar wrapPromise = require('./wrapPromise');\n\n\n// Max timeout of ten minutes\nvar DEFAULT_TIMEOUT_IN_MILLIS = 10 * 60 * 1000;\n\nvar handleApiResponse = function(resolve, reject, err, res, $body, isMfa) {\n  if (res != null && R.type($body) === 'Object') {\n    $body.status_code = res.statusCode;\n  }\n\n  // network / usage errors\n  if (err != null) {\n    return reject(err);\n\n  // success response (MFA)\n  } else if (isMfa && res.statusCode === 200) {\n    return resolve([null, $body]);\n\n  // mfa response (MFA)\n  } else if (isMfa && res.statusCode === 210) {\n    return resolve([$body, null]);\n\n  // success response (non mfa)\n  } else if (res.statusCode === 200) {\n    // extract request id from header for binary data,\n    // i.e. mime type application/*\n    if (res.headers['plaid-request-id'] != null &&\n        res.headers['content-type'] != null &&\n        res.headers['content-type'].indexOf('application') === 0) {\n      return resolve({\n        request_id: res.headers['plaid-request-id'],\n        buffer: $body\n      });\n    }\n    return resolve($body);\n\n  // plaid error\n  } else if (R.type($body) === 'Object') {\n    return reject(new PlaidError($body));\n\n  // Unknown body type returned, return a standard API_ERROR\n  } else {\n    return reject(new PlaidError({\n      error_type: 'API_ERROR',\n      status_code: res.statusCode,\n      error_code: 'INTERNAL_SERVER_ERROR',\n      error_message: String($body),\n      display_message: null,\n      request_id: null,\n    }));\n  }\n};\n\nvar plaidRequest = function(context, requestSpec, clientRequestOptions, cb) {\n  var uri = context.env + requestSpec.path;\n  var method = 'POST';\n  var requestJSON = R.merge(R.dissoc('env', context), requestSpec.body);\n  var headers = {\n    'User-Agent': 'Plaid Node v' + pjson.version\n  };\n\n  if (clientRequestOptions.version != null) {\n    headers['Plaid-Version'] = clientRequestOptions.version;\n  }\n\n  if (clientRequestOptions.clientApp != null) {\n    headers['Plaid-Client-App'] = clientRequestOptions.clientApp;\n  }\n\n  // merge the default request options with the client specified options,\n  // this allows for clients to supply extra options to the request function\n  var requestOptions = R.merge({\n    uri: uri,\n    method: method,\n    json: requestJSON,\n    headers: headers,\n    timeout: DEFAULT_TIMEOUT_IN_MILLIS,\n    encoding: requestSpec.binary ? null : 'utf8',\n  }, clientRequestOptions);\n\n  return wrapPromise(new Promise(function(resolve, reject) {\n    request(requestOptions, function(err, res, body) {\n      handleApiResponse(resolve, reject, err, res, body,\n        requestSpec.includeMfaResponse);\n    });\n  }), cb);\n};\n\nmodule.exports = plaidRequest;\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/plaid/lib/plaidRequest.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/plaid/lib/plaidRequest.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/plaid/lib/plaidRequest.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/plaid/lib/plaidRequest.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/plaid/lib/plaidRequest.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/plaid/lib/plaidRequest.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/plaid/lib/plaidRequest.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/plaid/lib/plaidRequest.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/plaid/lib/plaidRequest.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/plaid/lib/plaidRequest.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/plaid/lib/plaidRequest.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/plaid/lib/plaidRequest.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/plaid/lib/plaidRequest.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/plaid/lib/plaidRequest.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/plaid/lib/plaidRequest.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/plaid/lib/plaidRequest.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/plaid/lib/plaidRequest.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/plaid/lib/plaidRequest.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/plaid/lib/plaidRequest.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/plaid/lib/plaidRequest.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/plaid/lib/plaidRequest.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/plaid/lib/plaidRequest.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/plaid/lib/plaidRequest.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/plaid/lib/plaidRequest.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/plaid/lib/plaidRequest.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/plaid/lib/plaidRequest.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/plaid/lib/plaidRequest.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/plaid/lib/plaidRequest.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/plaid/lib/plaidRequest.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/plaid/lib/plaidRequest.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/plaid/lib/plaidRequest.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/plaid/lib/plaidRequest.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/plaid/lib/plaidRequest.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/plaid/lib/plaidRequest.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/plaid/lib/plaidRequest.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/plaid/lib/plaidRequest.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/plaid/lib/plaidRequest.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/plaid/lib/plaidRequest.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/plaid/lib/plaidRequest.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/plaid/lib/plaidRequest.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/plaid/lib/plaidRequest.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/plaid/lib/plaidRequest.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/plaid/lib/plaidRequest.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/plaid/lib/plaidRequest.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/plaid/lib/plaidRequest.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/plaid/lib/plaidRequest.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/plaid/lib/plaidRequest.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/plaid/lib/plaidRequest.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/plaid/lib/plaidRequest.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/plaid/lib/plaidRequest.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/plaid/lib/plaidRequest.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/plaid/lib/plaidRequest.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/plaid/lib/plaidRequest.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/plaid/lib/plaidRequest.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/plaid/lib/plaidRequest.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/plaid/lib/plaidRequest.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/plaid/lib/plaidRequest.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/plaid/lib/plaidRequest.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/plaid/lib/plaidRequest.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/plaid/lib/plaidRequest.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/plaid/lib/plaidRequest.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/plaid/lib/plaidRequest.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/plaid/lib/plaidRequest.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/plaid/lib/plaidRequest.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/plaid/lib/plaidRequest.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/plaid/lib/plaidRequest.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/plaid/lib/plaidRequest.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/plaid/lib/plaidRequest.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/plaid/lib/plaidRequest.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/plaid/lib/plaidRequest.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/plaid/lib/plaidRequest.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/plaid/lib/plaidRequest.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/plaid/lib/plaidRequest.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/plaid/lib/plaidRequest.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/plaid/lib/plaidRequest.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/plaid/lib/plaidRequest.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/plaid/lib/plaidRequest.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/plaid/lib/plaidRequest.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/plaid/lib/plaidRequest.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/plaid/lib/plaidRequest.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/plaid/lib/plaidRequest.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/plaid/lib/plaidRequest.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/plaid/lib/plaidRequest.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/plaid/lib/plaidRequest.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/plaid/lib/plaidRequest.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/plaid/lib/plaidRequest.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/plaid/lib/plaidRequest.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/plaid/lib/plaidRequest.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/plaid/lib/plaidRequest.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/plaid/lib/plaidRequest.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/plaid/lib/plaidRequest.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/plaid/lib/plaidRequest.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/plaid/lib/plaidRequest.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/plaid/lib/plaidRequest.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/plaid/lib/plaidRequest.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/plaid/lib/plaidRequest.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/plaid/lib/plaidRequest.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/plaid/lib/plaidRequest.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}}],"sources":{"../node_modules/plaid/lib/plaidRequest.js":"'use strict';\n\nvar R = require('ramda');\nvar request = require('request');\nvar pjson = require('../package.json');\n\nvar PlaidError = require('./PlaidError');\nvar wrapPromise = require('./wrapPromise');\n\n\n// Max timeout of ten minutes\nvar DEFAULT_TIMEOUT_IN_MILLIS = 10 * 60 * 1000;\n\nvar handleApiResponse = function(resolve, reject, err, res, $body, isMfa) {\n  if (res != null && R.type($body) === 'Object') {\n    $body.status_code = res.statusCode;\n  }\n\n  // network / usage errors\n  if (err != null) {\n    return reject(err);\n\n  // success response (MFA)\n  } else if (isMfa && res.statusCode === 200) {\n    return resolve([null, $body]);\n\n  // mfa response (MFA)\n  } else if (isMfa && res.statusCode === 210) {\n    return resolve([$body, null]);\n\n  // success response (non mfa)\n  } else if (res.statusCode === 200) {\n    // extract request id from header for binary data,\n    // i.e. mime type application/*\n    if (res.headers['plaid-request-id'] != null &&\n        res.headers['content-type'] != null &&\n        res.headers['content-type'].indexOf('application') === 0) {\n      return resolve({\n        request_id: res.headers['plaid-request-id'],\n        buffer: $body\n      });\n    }\n    return resolve($body);\n\n  // plaid error\n  } else if (R.type($body) === 'Object') {\n    return reject(new PlaidError($body));\n\n  // Unknown body type returned, return a standard API_ERROR\n  } else {\n    return reject(new PlaidError({\n      error_type: 'API_ERROR',\n      status_code: res.statusCode,\n      error_code: 'INTERNAL_SERVER_ERROR',\n      error_message: String($body),\n      display_message: null,\n      request_id: null,\n    }));\n  }\n};\n\nvar plaidRequest = function(context, requestSpec, clientRequestOptions, cb) {\n  var uri = context.env + requestSpec.path;\n  var method = 'POST';\n  var requestJSON = R.merge(R.dissoc('env', context), requestSpec.body);\n  var headers = {\n    'User-Agent': 'Plaid Node v' + pjson.version\n  };\n\n  if (clientRequestOptions.version != null) {\n    headers['Plaid-Version'] = clientRequestOptions.version;\n  }\n\n  if (clientRequestOptions.clientApp != null) {\n    headers['Plaid-Client-App'] = clientRequestOptions.clientApp;\n  }\n\n  // merge the default request options with the client specified options,\n  // this allows for clients to supply extra options to the request function\n  var requestOptions = R.merge({\n    uri: uri,\n    method: method,\n    json: requestJSON,\n    headers: headers,\n    timeout: DEFAULT_TIMEOUT_IN_MILLIS,\n    encoding: requestSpec.binary ? null : 'utf8',\n  }, clientRequestOptions);\n\n  return wrapPromise(new Promise(function(resolve, reject) {\n    request(requestOptions, function(err, res, body) {\n      handleApiResponse(resolve, reject, err, res, body,\n        requestSpec.includeMfaResponse);\n    });\n  }), cb);\n};\n\nmodule.exports = plaidRequest;\n"},"lineCount":98}},"error":null,"hash":"9adf4d841219bc9483e2cace29a8eb5c","cacheData":{"env":{}}}