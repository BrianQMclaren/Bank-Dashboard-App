{"id":"../../node_modules/ramda/src/zipObj.js","dependencies":[{"name":"/Users/brian/Sites/dashboard/package.json","includedInParent":true,"mtime":1560188391000},{"name":"/Users/brian/Sites/dashboard/.babelrc","includedInParent":true,"mtime":1558727335000},{"name":"/Users/brian/Sites/dashboard/node_modules/ramda/package.json","includedInParent":true,"mtime":1557967283000},{"name":"./internal/_curry2","loc":{"line":1,"column":22},"parent":"/Users/brian/Sites/dashboard/node_modules/ramda/src/zipObj.js","resolved":"/Users/brian/Sites/dashboard/node_modules/ramda/src/internal/_curry2.js"}],"generated":{"js":"var _curry2 = require('./internal/_curry2');\n\n\n/**\n * Creates a new object out of a list of keys and a list of values.\n * Key/value pairing is truncated to the length of the shorter of the two lists.\n * Note: `zipObj` is equivalent to `pipe(zipWith(pair), fromPairs)`.\n *\n * @func\n * @memberOf R\n * @since v0.3.0\n * @category List\n * @sig [String] -> [*] -> {String: *}\n * @param {Array} keys The array that will be properties on the output object.\n * @param {Array} values The list of values on the output object.\n * @return {Object} The object made by pairing up same-indexed elements of `keys` and `values`.\n * @example\n *\n *      R.zipObj(['a', 'b', 'c'], [1, 2, 3]); //=> {a: 1, b: 2, c: 3}\n */\nmodule.exports = _curry2(function zipObj(keys, values) {\n  var idx = 0;\n  var len = Math.min(keys.length, values.length);\n  var out = {};\n  while (idx < len) {\n    out[keys[idx]] = values[idx];\n    idx += 1;\n  }\n  return out;\n});\n"},"sourceMaps":{"js":{"mappings":[{"source":"../../node_modules/ramda/src/zipObj.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../../node_modules/ramda/src/zipObj.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../../node_modules/ramda/src/zipObj.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../../node_modules/ramda/src/zipObj.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../../node_modules/ramda/src/zipObj.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../../node_modules/ramda/src/zipObj.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../../node_modules/ramda/src/zipObj.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../../node_modules/ramda/src/zipObj.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../../node_modules/ramda/src/zipObj.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../../node_modules/ramda/src/zipObj.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../../node_modules/ramda/src/zipObj.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../../node_modules/ramda/src/zipObj.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../../node_modules/ramda/src/zipObj.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../../node_modules/ramda/src/zipObj.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../../node_modules/ramda/src/zipObj.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../../node_modules/ramda/src/zipObj.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../../node_modules/ramda/src/zipObj.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../../node_modules/ramda/src/zipObj.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../../node_modules/ramda/src/zipObj.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../../node_modules/ramda/src/zipObj.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../../node_modules/ramda/src/zipObj.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../../node_modules/ramda/src/zipObj.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../../node_modules/ramda/src/zipObj.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../../node_modules/ramda/src/zipObj.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../../node_modules/ramda/src/zipObj.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../../node_modules/ramda/src/zipObj.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../../node_modules/ramda/src/zipObj.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../../node_modules/ramda/src/zipObj.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../../node_modules/ramda/src/zipObj.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../../node_modules/ramda/src/zipObj.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../../node_modules/ramda/src/zipObj.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}}],"sources":{"../../node_modules/ramda/src/zipObj.js":"var _curry2 = require('./internal/_curry2');\n\n\n/**\n * Creates a new object out of a list of keys and a list of values.\n * Key/value pairing is truncated to the length of the shorter of the two lists.\n * Note: `zipObj` is equivalent to `pipe(zipWith(pair), fromPairs)`.\n *\n * @func\n * @memberOf R\n * @since v0.3.0\n * @category List\n * @sig [String] -> [*] -> {String: *}\n * @param {Array} keys The array that will be properties on the output object.\n * @param {Array} values The list of values on the output object.\n * @return {Object} The object made by pairing up same-indexed elements of `keys` and `values`.\n * @example\n *\n *      R.zipObj(['a', 'b', 'c'], [1, 2, 3]); //=> {a: 1, b: 2, c: 3}\n */\nmodule.exports = _curry2(function zipObj(keys, values) {\n  var idx = 0;\n  var len = Math.min(keys.length, values.length);\n  var out = {};\n  while (idx < len) {\n    out[keys[idx]] = values[idx];\n    idx += 1;\n  }\n  return out;\n});\n"},"lineCount":31}},"error":null,"hash":"206e59d5a2da2e9cc1ff19b2852954e3","cacheData":{"env":{}}}