{"id":"../../node_modules/ramda/src/applySpec.js","dependencies":[{"name":"/Users/brian/Sites/dashboard/package.json","includedInParent":true,"mtime":1560188391000},{"name":"/Users/brian/Sites/dashboard/.babelrc","includedInParent":true,"mtime":1558727335000},{"name":"/Users/brian/Sites/dashboard/node_modules/ramda/package.json","includedInParent":true,"mtime":1557967283000},{"name":"./internal/_curry1","loc":{"line":1,"column":22},"parent":"/Users/brian/Sites/dashboard/node_modules/ramda/src/applySpec.js","resolved":"/Users/brian/Sites/dashboard/node_modules/ramda/src/internal/_curry1.js"},{"name":"./apply","loc":{"line":2,"column":20},"parent":"/Users/brian/Sites/dashboard/node_modules/ramda/src/applySpec.js","resolved":"/Users/brian/Sites/dashboard/node_modules/ramda/src/apply.js"},{"name":"./curryN","loc":{"line":3,"column":21},"parent":"/Users/brian/Sites/dashboard/node_modules/ramda/src/applySpec.js","resolved":"/Users/brian/Sites/dashboard/node_modules/ramda/src/curryN.js"},{"name":"./map","loc":{"line":4,"column":18},"parent":"/Users/brian/Sites/dashboard/node_modules/ramda/src/applySpec.js","resolved":"/Users/brian/Sites/dashboard/node_modules/ramda/src/map.js"},{"name":"./max","loc":{"line":5,"column":18},"parent":"/Users/brian/Sites/dashboard/node_modules/ramda/src/applySpec.js","resolved":"/Users/brian/Sites/dashboard/node_modules/ramda/src/max.js"},{"name":"./pluck","loc":{"line":6,"column":20},"parent":"/Users/brian/Sites/dashboard/node_modules/ramda/src/applySpec.js","resolved":"/Users/brian/Sites/dashboard/node_modules/ramda/src/pluck.js"},{"name":"./reduce","loc":{"line":7,"column":21},"parent":"/Users/brian/Sites/dashboard/node_modules/ramda/src/applySpec.js","resolved":"/Users/brian/Sites/dashboard/node_modules/ramda/src/reduce.js"},{"name":"./values","loc":{"line":8,"column":21},"parent":"/Users/brian/Sites/dashboard/node_modules/ramda/src/applySpec.js","resolved":"/Users/brian/Sites/dashboard/node_modules/ramda/src/values.js"}],"generated":{"js":"var _curry1 = require('./internal/_curry1');\nvar apply = require('./apply');\nvar curryN = require('./curryN');\nvar map = require('./map');\nvar max = require('./max');\nvar pluck = require('./pluck');\nvar reduce = require('./reduce');\nvar values = require('./values');\n\n\n/**\n * Given a spec object recursively mapping properties to functions, creates a\n * function producing an object of the same structure, by mapping each property\n * to the result of calling its associated function with the supplied arguments.\n *\n * @func\n * @memberOf R\n * @since v0.20.0\n * @category Function\n * @sig {k: ((a, b, ..., m) -> v)} -> ((a, b, ..., m) -> {k: v})\n * @param {Object} spec an object recursively mapping properties to functions for\n *        producing the values for these properties.\n * @return {Function} A function that returns an object of the same structure\n * as `spec', with each property set to the value returned by calling its\n * associated function with the supplied arguments.\n * @see R.converge, R.juxt\n * @example\n *\n *      var getMetrics = R.applySpec({\n *                                      sum: R.add,\n *                                      nested: { mul: R.multiply }\n *                                   });\n *      getMetrics(2, 4); // => { sum: 6, nested: { mul: 8 } }\n * @symb R.applySpec({ x: f, y: { z: g } })(a, b) = { x: f(a, b), y: { z: g(a, b) } }\n */\nmodule.exports = _curry1(function applySpec(spec) {\n  spec = map(function(v) { return typeof v == 'function' ? v : applySpec(v); },\n             spec);\n  return curryN(reduce(max, 0, pluck('length', values(spec))),\n                function() {\n                  var args = arguments;\n                  return map(function(f) { return apply(f, args); }, spec);\n                });\n});\n"},"sourceMaps":{"js":{"mappings":[{"source":"../../node_modules/ramda/src/applySpec.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../../node_modules/ramda/src/applySpec.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../../node_modules/ramda/src/applySpec.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../../node_modules/ramda/src/applySpec.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../../node_modules/ramda/src/applySpec.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../../node_modules/ramda/src/applySpec.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../../node_modules/ramda/src/applySpec.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../../node_modules/ramda/src/applySpec.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../../node_modules/ramda/src/applySpec.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../../node_modules/ramda/src/applySpec.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../../node_modules/ramda/src/applySpec.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../../node_modules/ramda/src/applySpec.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../../node_modules/ramda/src/applySpec.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../../node_modules/ramda/src/applySpec.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../../node_modules/ramda/src/applySpec.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../../node_modules/ramda/src/applySpec.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../../node_modules/ramda/src/applySpec.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../../node_modules/ramda/src/applySpec.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../../node_modules/ramda/src/applySpec.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../../node_modules/ramda/src/applySpec.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../../node_modules/ramda/src/applySpec.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../../node_modules/ramda/src/applySpec.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../../node_modules/ramda/src/applySpec.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../../node_modules/ramda/src/applySpec.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../../node_modules/ramda/src/applySpec.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../../node_modules/ramda/src/applySpec.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../../node_modules/ramda/src/applySpec.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../../node_modules/ramda/src/applySpec.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../../node_modules/ramda/src/applySpec.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../../node_modules/ramda/src/applySpec.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../../node_modules/ramda/src/applySpec.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../../node_modules/ramda/src/applySpec.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../../node_modules/ramda/src/applySpec.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../../node_modules/ramda/src/applySpec.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../../node_modules/ramda/src/applySpec.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../../node_modules/ramda/src/applySpec.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../../node_modules/ramda/src/applySpec.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../../node_modules/ramda/src/applySpec.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../../node_modules/ramda/src/applySpec.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../../node_modules/ramda/src/applySpec.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../../node_modules/ramda/src/applySpec.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../../node_modules/ramda/src/applySpec.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../../node_modules/ramda/src/applySpec.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../../node_modules/ramda/src/applySpec.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../../node_modules/ramda/src/applySpec.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}}],"sources":{"../../node_modules/ramda/src/applySpec.js":"var _curry1 = require('./internal/_curry1');\nvar apply = require('./apply');\nvar curryN = require('./curryN');\nvar map = require('./map');\nvar max = require('./max');\nvar pluck = require('./pluck');\nvar reduce = require('./reduce');\nvar values = require('./values');\n\n\n/**\n * Given a spec object recursively mapping properties to functions, creates a\n * function producing an object of the same structure, by mapping each property\n * to the result of calling its associated function with the supplied arguments.\n *\n * @func\n * @memberOf R\n * @since v0.20.0\n * @category Function\n * @sig {k: ((a, b, ..., m) -> v)} -> ((a, b, ..., m) -> {k: v})\n * @param {Object} spec an object recursively mapping properties to functions for\n *        producing the values for these properties.\n * @return {Function} A function that returns an object of the same structure\n * as `spec', with each property set to the value returned by calling its\n * associated function with the supplied arguments.\n * @see R.converge, R.juxt\n * @example\n *\n *      var getMetrics = R.applySpec({\n *                                      sum: R.add,\n *                                      nested: { mul: R.multiply }\n *                                   });\n *      getMetrics(2, 4); // => { sum: 6, nested: { mul: 8 } }\n * @symb R.applySpec({ x: f, y: { z: g } })(a, b) = { x: f(a, b), y: { z: g(a, b) } }\n */\nmodule.exports = _curry1(function applySpec(spec) {\n  spec = map(function(v) { return typeof v == 'function' ? v : applySpec(v); },\n             spec);\n  return curryN(reduce(max, 0, pluck('length', values(spec))),\n                function() {\n                  var args = arguments;\n                  return map(function(f) { return apply(f, args); }, spec);\n                });\n});\n"},"lineCount":45}},"error":null,"hash":"918aac53d193197028047e932d94a65f","cacheData":{"env":{}}}