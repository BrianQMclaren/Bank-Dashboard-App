{"id":"../../node_modules/ramda/src/groupWith.js","dependencies":[{"name":"/Users/brian/Sites/dashboard/package.json","includedInParent":true,"mtime":1560188391000},{"name":"/Users/brian/Sites/dashboard/.babelrc","includedInParent":true,"mtime":1558727335000},{"name":"/Users/brian/Sites/dashboard/node_modules/ramda/package.json","includedInParent":true,"mtime":1557967283000},{"name":"./internal/_curry2","loc":{"line":1,"column":22},"parent":"/Users/brian/Sites/dashboard/node_modules/ramda/src/groupWith.js","resolved":"/Users/brian/Sites/dashboard/node_modules/ramda/src/internal/_curry2.js"}],"generated":{"js":"var _curry2 = require('./internal/_curry2');\n\n/**\n * Takes a list and returns a list of lists where each sublist's elements are\n * all \"equal\" according to the provided equality function.\n *\n * @func\n * @memberOf R\n * @since v0.21.0\n * @category List\n * @sig ((a, a) → Boolean) → [a] → [[a]]\n * @param {Function} fn Function for determining whether two given (adjacent)\n *        elements should be in the same group\n * @param {Array} list The array to group. Also accepts a string, which will be\n *        treated as a list of characters.\n * @return {List} A list that contains sublists of equal elements,\n *         whose concatenations are equal to the original list.\n * @example\n *\n * R.groupWith(R.equals, [0, 1, 1, 2, 3, 5, 8, 13, 21])\n * //=> [[0], [1, 1], [2], [3], [5], [8], [13], [21]]\n *\n * R.groupWith((a, b) => a % 2 === b % 2, [0, 1, 1, 2, 3, 5, 8, 13, 21])\n * //=> [[0], [1, 1], [2], [3, 5], [8], [13, 21]]\n *\n * R.groupWith(R.eqBy(isVowel), 'aestiou')\n * //=> ['ae', 'st', 'iou']\n */\nmodule.exports = _curry2(function(fn, list) {\n  var res = [];\n  var idx = 0;\n  var len = list.length;\n  while (idx < len) {\n    var nextidx = idx + 1;\n    while (nextidx < len && fn(list[idx], list[nextidx])) {\n      nextidx += 1;\n    }\n    res.push(list.slice(idx, nextidx));\n    idx = nextidx;\n  }\n  return res;\n});\n"},"sourceMaps":{"js":{"mappings":[{"source":"../../node_modules/ramda/src/groupWith.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../../node_modules/ramda/src/groupWith.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../../node_modules/ramda/src/groupWith.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../../node_modules/ramda/src/groupWith.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../../node_modules/ramda/src/groupWith.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../../node_modules/ramda/src/groupWith.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../../node_modules/ramda/src/groupWith.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../../node_modules/ramda/src/groupWith.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../../node_modules/ramda/src/groupWith.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../../node_modules/ramda/src/groupWith.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../../node_modules/ramda/src/groupWith.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../../node_modules/ramda/src/groupWith.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../../node_modules/ramda/src/groupWith.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../../node_modules/ramda/src/groupWith.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../../node_modules/ramda/src/groupWith.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../../node_modules/ramda/src/groupWith.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../../node_modules/ramda/src/groupWith.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../../node_modules/ramda/src/groupWith.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../../node_modules/ramda/src/groupWith.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../../node_modules/ramda/src/groupWith.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../../node_modules/ramda/src/groupWith.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../../node_modules/ramda/src/groupWith.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../../node_modules/ramda/src/groupWith.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../../node_modules/ramda/src/groupWith.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../../node_modules/ramda/src/groupWith.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../../node_modules/ramda/src/groupWith.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../../node_modules/ramda/src/groupWith.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../../node_modules/ramda/src/groupWith.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../../node_modules/ramda/src/groupWith.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../../node_modules/ramda/src/groupWith.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../../node_modules/ramda/src/groupWith.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../../node_modules/ramda/src/groupWith.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../../node_modules/ramda/src/groupWith.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../../node_modules/ramda/src/groupWith.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../../node_modules/ramda/src/groupWith.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../../node_modules/ramda/src/groupWith.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../../node_modules/ramda/src/groupWith.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../../node_modules/ramda/src/groupWith.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../../node_modules/ramda/src/groupWith.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../../node_modules/ramda/src/groupWith.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../../node_modules/ramda/src/groupWith.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../../node_modules/ramda/src/groupWith.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../../node_modules/ramda/src/groupWith.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}}],"sources":{"../../node_modules/ramda/src/groupWith.js":"var _curry2 = require('./internal/_curry2');\n\n/**\n * Takes a list and returns a list of lists where each sublist's elements are\n * all \"equal\" according to the provided equality function.\n *\n * @func\n * @memberOf R\n * @since v0.21.0\n * @category List\n * @sig ((a, a) → Boolean) → [a] → [[a]]\n * @param {Function} fn Function for determining whether two given (adjacent)\n *        elements should be in the same group\n * @param {Array} list The array to group. Also accepts a string, which will be\n *        treated as a list of characters.\n * @return {List} A list that contains sublists of equal elements,\n *         whose concatenations are equal to the original list.\n * @example\n *\n * R.groupWith(R.equals, [0, 1, 1, 2, 3, 5, 8, 13, 21])\n * //=> [[0], [1, 1], [2], [3], [5], [8], [13], [21]]\n *\n * R.groupWith((a, b) => a % 2 === b % 2, [0, 1, 1, 2, 3, 5, 8, 13, 21])\n * //=> [[0], [1, 1], [2], [3, 5], [8], [13, 21]]\n *\n * R.groupWith(R.eqBy(isVowel), 'aestiou')\n * //=> ['ae', 'st', 'iou']\n */\nmodule.exports = _curry2(function(fn, list) {\n  var res = [];\n  var idx = 0;\n  var len = list.length;\n  while (idx < len) {\n    var nextidx = idx + 1;\n    while (nextidx < len && fn(list[idx], list[nextidx])) {\n      nextidx += 1;\n    }\n    res.push(list.slice(idx, nextidx));\n    idx = nextidx;\n  }\n  return res;\n});\n"},"lineCount":43}},"error":null,"hash":"f0329b1ed6656c3b2bcd1b40f355db07","cacheData":{"env":{}}}