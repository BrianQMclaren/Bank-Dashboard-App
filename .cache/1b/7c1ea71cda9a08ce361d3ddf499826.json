{"id":"../node_modules/ramda/src/mapAccum.js","dependencies":[{"name":"/Users/brian/Sites/dashboard/package.json","includedInParent":true,"mtime":1557967337000},{"name":"/Users/brian/Sites/dashboard/.babelrc","includedInParent":true,"mtime":1553892080000},{"name":"/Users/brian/Sites/dashboard/node_modules/ramda/package.json","includedInParent":true,"mtime":1557967283000},{"name":"./internal/_curry3","loc":{"line":1,"column":22},"parent":"/Users/brian/Sites/dashboard/node_modules/ramda/src/mapAccum.js","resolved":"/Users/brian/Sites/dashboard/node_modules/ramda/src/internal/_curry3.js"}],"generated":{"js":"var _curry3 = require('./internal/_curry3');\n\n\n/**\n * The mapAccum function behaves like a combination of map and reduce; it\n * applies a function to each element of a list, passing an accumulating\n * parameter from left to right, and returning a final value of this\n * accumulator together with the new list.\n *\n * The iterator function receives two arguments, *acc* and *value*, and should\n * return a tuple *[acc, value]*.\n *\n * @func\n * @memberOf R\n * @since v0.10.0\n * @category List\n * @sig (acc -> x -> (acc, y)) -> acc -> [x] -> (acc, [y])\n * @param {Function} fn The function to be called on every element of the input `list`.\n * @param {*} acc The accumulator value.\n * @param {Array} list The list to iterate over.\n * @return {*} The final, accumulated value.\n * @see R.addIndex, R.mapAccumRight\n * @example\n *\n *      var digits = ['1', '2', '3', '4'];\n *      var appender = (a, b) => [a + b, a + b];\n *\n *      R.mapAccum(appender, 0, digits); //=> ['01234', ['01', '012', '0123', '01234']]\n * @symb R.mapAccum(f, a, [b, c, d]) = [\n *   f(f(f(a, b)[0], c)[0], d)[0],\n *   [\n *     f(a, b)[1],\n *     f(f(a, b)[0], c)[1],\n *     f(f(f(a, b)[0], c)[0], d)[1]\n *   ]\n * ]\n */\nmodule.exports = _curry3(function mapAccum(fn, acc, list) {\n  var idx = 0;\n  var len = list.length;\n  var result = [];\n  var tuple = [acc];\n  while (idx < len) {\n    tuple = fn(tuple[0], list[idx]);\n    result[idx] = tuple[1];\n    idx += 1;\n  }\n  return [tuple[0], result];\n});\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/ramda/src/mapAccum.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/ramda/src/mapAccum.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/ramda/src/mapAccum.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/ramda/src/mapAccum.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/ramda/src/mapAccum.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/ramda/src/mapAccum.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/ramda/src/mapAccum.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/ramda/src/mapAccum.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/ramda/src/mapAccum.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/ramda/src/mapAccum.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/ramda/src/mapAccum.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/ramda/src/mapAccum.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/ramda/src/mapAccum.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/ramda/src/mapAccum.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/ramda/src/mapAccum.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/ramda/src/mapAccum.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/ramda/src/mapAccum.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/ramda/src/mapAccum.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/ramda/src/mapAccum.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/ramda/src/mapAccum.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/ramda/src/mapAccum.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/ramda/src/mapAccum.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/ramda/src/mapAccum.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/ramda/src/mapAccum.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/ramda/src/mapAccum.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/ramda/src/mapAccum.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/ramda/src/mapAccum.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/ramda/src/mapAccum.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/ramda/src/mapAccum.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/ramda/src/mapAccum.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/ramda/src/mapAccum.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/ramda/src/mapAccum.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/ramda/src/mapAccum.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/ramda/src/mapAccum.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/ramda/src/mapAccum.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/ramda/src/mapAccum.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/ramda/src/mapAccum.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/ramda/src/mapAccum.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/ramda/src/mapAccum.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/ramda/src/mapAccum.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/ramda/src/mapAccum.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/ramda/src/mapAccum.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/ramda/src/mapAccum.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/ramda/src/mapAccum.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/ramda/src/mapAccum.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/ramda/src/mapAccum.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/ramda/src/mapAccum.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/ramda/src/mapAccum.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/ramda/src/mapAccum.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/ramda/src/mapAccum.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}}],"sources":{"../node_modules/ramda/src/mapAccum.js":"var _curry3 = require('./internal/_curry3');\n\n\n/**\n * The mapAccum function behaves like a combination of map and reduce; it\n * applies a function to each element of a list, passing an accumulating\n * parameter from left to right, and returning a final value of this\n * accumulator together with the new list.\n *\n * The iterator function receives two arguments, *acc* and *value*, and should\n * return a tuple *[acc, value]*.\n *\n * @func\n * @memberOf R\n * @since v0.10.0\n * @category List\n * @sig (acc -> x -> (acc, y)) -> acc -> [x] -> (acc, [y])\n * @param {Function} fn The function to be called on every element of the input `list`.\n * @param {*} acc The accumulator value.\n * @param {Array} list The list to iterate over.\n * @return {*} The final, accumulated value.\n * @see R.addIndex, R.mapAccumRight\n * @example\n *\n *      var digits = ['1', '2', '3', '4'];\n *      var appender = (a, b) => [a + b, a + b];\n *\n *      R.mapAccum(appender, 0, digits); //=> ['01234', ['01', '012', '0123', '01234']]\n * @symb R.mapAccum(f, a, [b, c, d]) = [\n *   f(f(f(a, b)[0], c)[0], d)[0],\n *   [\n *     f(a, b)[1],\n *     f(f(a, b)[0], c)[1],\n *     f(f(f(a, b)[0], c)[0], d)[1]\n *   ]\n * ]\n */\nmodule.exports = _curry3(function mapAccum(fn, acc, list) {\n  var idx = 0;\n  var len = list.length;\n  var result = [];\n  var tuple = [acc];\n  while (idx < len) {\n    tuple = fn(tuple[0], list[idx]);\n    result[idx] = tuple[1];\n    idx += 1;\n  }\n  return [tuple[0], result];\n});\n"},"lineCount":50}},"error":null,"hash":"41bfa52940d2b9e4c03f501d0c192874","cacheData":{"env":{}}}