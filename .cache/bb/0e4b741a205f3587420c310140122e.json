{"id":"../node_modules/ramda/src/internal/_makeFlat.js","dependencies":[{"name":"/Users/brian/Sites/dashboard/package.json","includedInParent":true,"mtime":1557967337000},{"name":"/Users/brian/Sites/dashboard/.babelrc","includedInParent":true,"mtime":1553892080000},{"name":"/Users/brian/Sites/dashboard/node_modules/ramda/package.json","includedInParent":true,"mtime":1557967283000},{"name":"../isArrayLike","loc":{"line":1,"column":26},"parent":"/Users/brian/Sites/dashboard/node_modules/ramda/src/internal/_makeFlat.js","resolved":"/Users/brian/Sites/dashboard/node_modules/ramda/src/isArrayLike.js"}],"generated":{"js":"var isArrayLike = require('../isArrayLike');\n\n\n/**\n * `_makeFlat` is a helper function that returns a one-level or fully recursive\n * function based on the flag passed in.\n *\n * @private\n */\nmodule.exports = function _makeFlat(recursive) {\n  return function flatt(list) {\n    var value, jlen, j;\n    var result = [];\n    var idx = 0;\n    var ilen = list.length;\n\n    while (idx < ilen) {\n      if (isArrayLike(list[idx])) {\n        value = recursive ? flatt(list[idx]) : list[idx];\n        j = 0;\n        jlen = value.length;\n        while (j < jlen) {\n          result[result.length] = value[j];\n          j += 1;\n        }\n      } else {\n        result[result.length] = list[idx];\n      }\n      idx += 1;\n    }\n    return result;\n  };\n};\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/ramda/src/internal/_makeFlat.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/ramda/src/internal/_makeFlat.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/ramda/src/internal/_makeFlat.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/ramda/src/internal/_makeFlat.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/ramda/src/internal/_makeFlat.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/ramda/src/internal/_makeFlat.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/ramda/src/internal/_makeFlat.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/ramda/src/internal/_makeFlat.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/ramda/src/internal/_makeFlat.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/ramda/src/internal/_makeFlat.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/ramda/src/internal/_makeFlat.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/ramda/src/internal/_makeFlat.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/ramda/src/internal/_makeFlat.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/ramda/src/internal/_makeFlat.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/ramda/src/internal/_makeFlat.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/ramda/src/internal/_makeFlat.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/ramda/src/internal/_makeFlat.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/ramda/src/internal/_makeFlat.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/ramda/src/internal/_makeFlat.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/ramda/src/internal/_makeFlat.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/ramda/src/internal/_makeFlat.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/ramda/src/internal/_makeFlat.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/ramda/src/internal/_makeFlat.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/ramda/src/internal/_makeFlat.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/ramda/src/internal/_makeFlat.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/ramda/src/internal/_makeFlat.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/ramda/src/internal/_makeFlat.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/ramda/src/internal/_makeFlat.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/ramda/src/internal/_makeFlat.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/ramda/src/internal/_makeFlat.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/ramda/src/internal/_makeFlat.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/ramda/src/internal/_makeFlat.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/ramda/src/internal/_makeFlat.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/ramda/src/internal/_makeFlat.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}}],"sources":{"../node_modules/ramda/src/internal/_makeFlat.js":"var isArrayLike = require('../isArrayLike');\n\n\n/**\n * `_makeFlat` is a helper function that returns a one-level or fully recursive\n * function based on the flag passed in.\n *\n * @private\n */\nmodule.exports = function _makeFlat(recursive) {\n  return function flatt(list) {\n    var value, jlen, j;\n    var result = [];\n    var idx = 0;\n    var ilen = list.length;\n\n    while (idx < ilen) {\n      if (isArrayLike(list[idx])) {\n        value = recursive ? flatt(list[idx]) : list[idx];\n        j = 0;\n        jlen = value.length;\n        while (j < jlen) {\n          result[result.length] = value[j];\n          j += 1;\n        }\n      } else {\n        result[result.length] = list[idx];\n      }\n      idx += 1;\n    }\n    return result;\n  };\n};\n"},"lineCount":34}},"error":null,"hash":"e2a662e72e76d49df885ef058509be63","cacheData":{"env":{}}}