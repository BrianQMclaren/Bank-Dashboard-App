{"id":"../../node_modules/ramda/src/mergeWithKey.js","dependencies":[{"name":"/Users/brian/Sites/dashboard/package.json","includedInParent":true,"mtime":1560188391000},{"name":"/Users/brian/Sites/dashboard/.babelrc","includedInParent":true,"mtime":1558727335000},{"name":"/Users/brian/Sites/dashboard/node_modules/ramda/package.json","includedInParent":true,"mtime":1557967283000},{"name":"./internal/_curry3","loc":{"line":1,"column":22},"parent":"/Users/brian/Sites/dashboard/node_modules/ramda/src/mergeWithKey.js","resolved":"/Users/brian/Sites/dashboard/node_modules/ramda/src/internal/_curry3.js"},{"name":"./internal/_has","loc":{"line":2,"column":19},"parent":"/Users/brian/Sites/dashboard/node_modules/ramda/src/mergeWithKey.js","resolved":"/Users/brian/Sites/dashboard/node_modules/ramda/src/internal/_has.js"}],"generated":{"js":"var _curry3 = require('./internal/_curry3');\nvar _has = require('./internal/_has');\n\n\n/**\n * Creates a new object with the own properties of the two provided objects. If\n * a key exists in both objects, the provided function is applied to the key\n * and the values associated with the key in each object, with the result being\n * used as the value associated with the key in the returned object. The key\n * will be excluded from the returned object if the resulting value is\n * `undefined`.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category Object\n * @sig (String -> a -> a -> a) -> {a} -> {a} -> {a}\n * @param {Function} fn\n * @param {Object} l\n * @param {Object} r\n * @return {Object}\n * @see R.merge, R.mergeWith\n * @example\n *\n *      let concatValues = (k, l, r) => k == 'values' ? R.concat(l, r) : r\n *      R.mergeWithKey(concatValues,\n *                     { a: true, thing: 'foo', values: [10, 20] },\n *                     { b: true, thing: 'bar', values: [15, 35] });\n *      //=> { a: true, b: true, thing: 'bar', values: [10, 20, 15, 35] }\n * @symb R.mergeWithKey(f, { x: 1, y: 2 }, { y: 5, z: 3 }) = { x: 1, y: f('y', 2, 5), z: 3 }\n */\nmodule.exports = _curry3(function mergeWithKey(fn, l, r) {\n  var result = {};\n  var k;\n\n  for (k in l) {\n    if (_has(k, l)) {\n      result[k] = _has(k, r) ? fn(k, l[k], r[k]) : l[k];\n    }\n  }\n\n  for (k in r) {\n    if (_has(k, r) && !(_has(k, result))) {\n      result[k] = r[k];\n    }\n  }\n\n  return result;\n});\n"},"sourceMaps":{"js":{"mappings":[{"source":"../../node_modules/ramda/src/mergeWithKey.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../../node_modules/ramda/src/mergeWithKey.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../../node_modules/ramda/src/mergeWithKey.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../../node_modules/ramda/src/mergeWithKey.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../../node_modules/ramda/src/mergeWithKey.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../../node_modules/ramda/src/mergeWithKey.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../../node_modules/ramda/src/mergeWithKey.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../../node_modules/ramda/src/mergeWithKey.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../../node_modules/ramda/src/mergeWithKey.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../../node_modules/ramda/src/mergeWithKey.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../../node_modules/ramda/src/mergeWithKey.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../../node_modules/ramda/src/mergeWithKey.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../../node_modules/ramda/src/mergeWithKey.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../../node_modules/ramda/src/mergeWithKey.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../../node_modules/ramda/src/mergeWithKey.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../../node_modules/ramda/src/mergeWithKey.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../../node_modules/ramda/src/mergeWithKey.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../../node_modules/ramda/src/mergeWithKey.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../../node_modules/ramda/src/mergeWithKey.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../../node_modules/ramda/src/mergeWithKey.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../../node_modules/ramda/src/mergeWithKey.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../../node_modules/ramda/src/mergeWithKey.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../../node_modules/ramda/src/mergeWithKey.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../../node_modules/ramda/src/mergeWithKey.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../../node_modules/ramda/src/mergeWithKey.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../../node_modules/ramda/src/mergeWithKey.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../../node_modules/ramda/src/mergeWithKey.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../../node_modules/ramda/src/mergeWithKey.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../../node_modules/ramda/src/mergeWithKey.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../../node_modules/ramda/src/mergeWithKey.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../../node_modules/ramda/src/mergeWithKey.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../../node_modules/ramda/src/mergeWithKey.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../../node_modules/ramda/src/mergeWithKey.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../../node_modules/ramda/src/mergeWithKey.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../../node_modules/ramda/src/mergeWithKey.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../../node_modules/ramda/src/mergeWithKey.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../../node_modules/ramda/src/mergeWithKey.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../../node_modules/ramda/src/mergeWithKey.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../../node_modules/ramda/src/mergeWithKey.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../../node_modules/ramda/src/mergeWithKey.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../../node_modules/ramda/src/mergeWithKey.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../../node_modules/ramda/src/mergeWithKey.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../../node_modules/ramda/src/mergeWithKey.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../../node_modules/ramda/src/mergeWithKey.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../../node_modules/ramda/src/mergeWithKey.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../../node_modules/ramda/src/mergeWithKey.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../../node_modules/ramda/src/mergeWithKey.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../../node_modules/ramda/src/mergeWithKey.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../../node_modules/ramda/src/mergeWithKey.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../../node_modules/ramda/src/mergeWithKey.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}}],"sources":{"../../node_modules/ramda/src/mergeWithKey.js":"var _curry3 = require('./internal/_curry3');\nvar _has = require('./internal/_has');\n\n\n/**\n * Creates a new object with the own properties of the two provided objects. If\n * a key exists in both objects, the provided function is applied to the key\n * and the values associated with the key in each object, with the result being\n * used as the value associated with the key in the returned object. The key\n * will be excluded from the returned object if the resulting value is\n * `undefined`.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category Object\n * @sig (String -> a -> a -> a) -> {a} -> {a} -> {a}\n * @param {Function} fn\n * @param {Object} l\n * @param {Object} r\n * @return {Object}\n * @see R.merge, R.mergeWith\n * @example\n *\n *      let concatValues = (k, l, r) => k == 'values' ? R.concat(l, r) : r\n *      R.mergeWithKey(concatValues,\n *                     { a: true, thing: 'foo', values: [10, 20] },\n *                     { b: true, thing: 'bar', values: [15, 35] });\n *      //=> { a: true, b: true, thing: 'bar', values: [10, 20, 15, 35] }\n * @symb R.mergeWithKey(f, { x: 1, y: 2 }, { y: 5, z: 3 }) = { x: 1, y: f('y', 2, 5), z: 3 }\n */\nmodule.exports = _curry3(function mergeWithKey(fn, l, r) {\n  var result = {};\n  var k;\n\n  for (k in l) {\n    if (_has(k, l)) {\n      result[k] = _has(k, r) ? fn(k, l[k], r[k]) : l[k];\n    }\n  }\n\n  for (k in r) {\n    if (_has(k, r) && !(_has(k, result))) {\n      result[k] = r[k];\n    }\n  }\n\n  return result;\n});\n"},"lineCount":50}},"error":null,"hash":"1bd4bcfa0e8c18256a78f539845d446a","cacheData":{"env":{}}}